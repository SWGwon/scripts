void separateTwoDetectors(TString inputFileName) {
    TFile* inputFile = new TFile(inputFileName);
    TTree* inputTree = (TTree*)inputFile->Get("tree");
    int    INPUT_ifileNo = {}; inputTree->SetBranchAddress("ifileNo", &INPUT_ifileNo);
    int    INPUT_ievt = {}; inputTree->SetBranchAddress("ievt", &INPUT_ievt);
    float  INPUT_vtx[3] = {}; inputTree->SetBranchAddress("vtx", &INPUT_vtx);
    int    INPUT_nFS = {}; inputTree->SetBranchAddress("nFS", &INPUT_nFS);
    int    INPUT_fsPdg[1000] = {}; inputTree->SetBranchAddress("fsPdg", &INPUT_fsPdg);
    float  INPUT_fsPx[1000] = {}; inputTree->SetBranchAddress("fsPx", &INPUT_fsPx);
    float  INPUT_fsPy[1000] = {}; inputTree->SetBranchAddress("fsPy", &INPUT_fsPy);
    float  INPUT_fsPz[1000] = {}; inputTree->SetBranchAddress("fsPz", &INPUT_fsPz);
    float  INPUT_fsE[1000] = {}; inputTree->SetBranchAddress("fsE", &INPUT_fsE);
    float  INPUT_neutronHitX[1000] = {}; inputTree->SetBranchAddress("neutronHitX", &INPUT_neutronHitX);
    float  INPUT_neutronHitY[1000] = {}; inputTree->SetBranchAddress("neutronHitY", &INPUT_neutronHitY);
    float  INPUT_neutronHitZ[1000] = {}; inputTree->SetBranchAddress("neutronHitZ", &INPUT_neutronHitZ);
    float  INPUT_neutronHitT[1000] = {}; inputTree->SetBranchAddress("neutronHitT", &INPUT_neutronHitT);
    float  INPUT_neutronHitE[1000] = {}; inputTree->SetBranchAddress("neutronHitE", &INPUT_neutronHitE);
    float  INPUT_neutronHitPDG[1000] = {}; inputTree->SetBranchAddress("neutronHitPDG", &INPUT_neutronHitPDG);
    float  INPUT_initialE[1000] = {}; inputTree->SetBranchAddress("initialE", &INPUT_initialE);
    float  INPUT_daughterPx[1000] = {}; inputTree->SetBranchAddress("daughterPx", &INPUT_daughterPx);
    float  INPUT_daughterPy[1000] = {}; inputTree->SetBranchAddress("daughterPy", &INPUT_daughterPy);
    float  INPUT_daughterPz[1000] = {}; inputTree->SetBranchAddress("daughterPz", &INPUT_daughterPz);
    float  INPUT_daughterPDG[1000] = {}; inputTree->SetBranchAddress("daughterPDG", &INPUT_daughterPDG);
    int    INPUT_node[1000] = {}; inputTree->SetBranchAddress("node", &INPUT_node);
    float  INPUT_neutronPx[1000] = {}; inputTree->SetBranchAddress("neutronPx", &INPUT_neutronPx);
    float  INPUT_neutronPy[1000] = {}; inputTree->SetBranchAddress("neutronPy", &INPUT_neutronPy);
    float  INPUT_neutronPz[1000] = {}; inputTree->SetBranchAddress("neutronPz", &INPUT_neutronPz);
    float  INPUT_neutronId[1000] = {}; inputTree->SetBranchAddress("neutronId", &INPUT_neutronId);
    float  INPUT_daughterParentId[1000] = {}; inputTree->SetBranchAddress("daughterParentId", &INPUT_daughterParentId);
    int    INPUT_delay[1000] = {}; inputTree->SetBranchAddress("delay", &INPUT_delay);
    float  INPUT_t_t0[1000] = {}; inputTree->SetBranchAddress("t0", &INPUT_t_t0);
    float  INPUT_t_spill[1000] = {}; inputTree->SetBranchAddress("spill", &INPUT_t_spill);
    float  INPUT_t_gamma_time[1000] = {}; inputTree->SetBranchAddress("gamma_time", &INPUT_t_gamma_time);
    float  INPUT_t_neutron_time = {}; inputTree->SetBranchAddress("neutron_time", &INPUT_t_neutron_time);
    float  INPUT_neutronParentId[1000] = {}; inputTree->SetBranchAddress("neutronParentId", &INPUT_neutronParentId);
    float  INPUT_neutronParentPDG[1000] = {}; inputTree->SetBranchAddress("neutronParentPDG", &INPUT_neutronParentPDG);
    float  INPUT_neutronTrackId[1000] = {}; inputTree->SetBranchAddress("neutronTrackId", &INPUT_neutronTrackId);
    float  INPUT_neutronTrackPDG[1000] = {}; inputTree->SetBranchAddress("neutronTrackPDG", &INPUT_neutronTrackPDG);
    float  INPUT_neutronTrackAng[1000] = {}; inputTree->SetBranchAddress("neutronTrackAng", &INPUT_neutronTrackAng);
    int    INPUT_t_id[1000] = {}; inputTree->SetBranchAddress("id", &INPUT_t_id);
    float  INPUT_t_length[1000] = {}; inputTree->SetBranchAddress("length", &INPUT_t_length);
    int    INPUT_nTrackId[1000] = {}; inputTree->SetBranchAddress("nTrackId", &INPUT_nTrackId);
    int    INPUT_nParentId[1000] = {}; inputTree->SetBranchAddress("nParentId", &INPUT_nParentId);
    float  INPUT_nTrackEnergy[1000] = {}; inputTree->SetBranchAddress("nTrackEnergy", &INPUT_nTrackEnergy);
    float  INPUT_nTrackAng[1000] = {}; inputTree->SetBranchAddress("nTrackAng", &INPUT_nTrackAng);
    int    INPUT_nTrackPdg[1000] = {}; inputTree->SetBranchAddress("nTrackPdg", &INPUT_nTrackPdg);
    int    INPUT_nParentPdg[1000] = {}; inputTree->SetBranchAddress("nParentPdg", &INPUT_nParentPdg);
    float  INPUT_pointPositionX[100] = {}; inputTree->SetBranchAddress("pointPositionX", &INPUT_pointPositionX);
    float  INPUT_pointPositionY[100] = {}; inputTree->SetBranchAddress("pointPositionY", &INPUT_pointPositionY);
    float  INPUT_pointPositionZ[100] = {}; inputTree->SetBranchAddress("pointPositionZ", &INPUT_pointPositionZ);
    int    INPUT_pointProcess[100] = {}; inputTree->SetBranchAddress("pointProcess", &INPUT_pointProcess);
    int    INPUT_pointSubProcess[100] = {}; inputTree->SetBranchAddress("pointSubProcess", &INPUT_pointSubProcess);
    float  INPUT_nElastic[100] = {}; inputTree->SetBranchAddress("nElastic", &INPUT_nElastic);

    TFile* SFGDoutput = new TFile("tempSFGD.root", "RECREATE");
    TTree* SFGDtree = new TTree("tree", "tree");
    int    SFGD_ifileNo = {}; SFGDtree->Branch("ifileNo", &SFGD_ifileNo, "ifileNo/I");
    int    SFGD_ievt = {}; SFGDtree->Branch("ievt", &SFGD_ievt, "ievt/I");
    float  SFGD_vtx[3] = {}; SFGDtree->Branch("vtx", &SFGD_vtx, "vtx[3]/F");
    int    SFGD_nFS = {}; SFGDtree->Branch("nFS", &SFGD_nFS, "nFS/I");
    int    SFGD_fsPdg[1000] = {}; SFGDtree->Branch("fsPdg", &SFGD_fsPdg, "fsPdg[nFS]/I");
    float  SFGD_fsPx[1000] = {}; SFGDtree->Branch("fsPx", &SFGD_fsPx, "fsPx[nFS]/F");
    float  SFGD_fsPy[1000] = {}; SFGDtree->Branch("fsPy", &SFGD_fsPy, "fsPy[nFS]/F");
    float  SFGD_fsPz[1000] = {}; SFGDtree->Branch("fsPz", &SFGD_fsPz, "fsPz[nFS]/F");
    float  SFGD_fsE[1000] = {}; SFGDtree->Branch("fsE", &SFGD_fsE, "fsE[nFS]/F");
    float  SFGD_neutronHitX[1000] = {}; SFGDtree->Branch("neutronHitX", &SFGD_neutronHitX, "neutronHitX[1000]/F");
    float  SFGD_neutronHitY[1000] = {}; SFGDtree->Branch("neutronHitY", &SFGD_neutronHitY, "neutronHitY[1000]/F");
    float  SFGD_neutronHitZ[1000] = {}; SFGDtree->Branch("neutronHitZ", &SFGD_neutronHitZ, "neutronHitZ[1000]/F");
    float  SFGD_neutronHitT[1000] = {}; SFGDtree->Branch("neutronHitT", &SFGD_neutronHitT, "neutronHitT[1000]/F");
    float  SFGD_neutronHitE[1000] = {}; SFGDtree->Branch("neutronHitE", &SFGD_neutronHitE, "neutronHitE[1000]/F");
    float  SFGD_neutronHitPDG[1000] = {}; SFGDtree->Branch("neutronHitPDG", &SFGD_neutronHitPDG, "neutronHitPDG[1000]/F");
    float  SFGD_initialE[1000] = {}; SFGDtree->Branch("initialE", &SFGD_initialE, "initialE[1000]/F");
    float  SFGD_daughterPx[1000] = {}; SFGDtree->Branch("daughterPx", &SFGD_daughterPx, "daughterPx[1000]/F");
    float  SFGD_daughterPy[1000] = {}; SFGDtree->Branch("daughterPy", &SFGD_daughterPy, "daughterPy[1000]/F");
    float  SFGD_daughterPz[1000] = {}; SFGDtree->Branch("daughterPz", &SFGD_daughterPz, "daughterPz[1000]/F");
    float  SFGD_daughterPDG[1000] = {}; SFGDtree->Branch("daughterPDG", &SFGD_daughterPDG, "daughterPDG[1000]/F");
    int    SFGD_node[1000] = {}; SFGDtree->Branch("node", &SFGD_node, "node[1000]/I");
    float  SFGD_neutronPx[1000] = {}; SFGDtree->Branch("neutronPx", &SFGD_neutronPx, "neutronPx[1000]/F");
    float  SFGD_neutronPy[1000] = {}; SFGDtree->Branch("neutronPy", &SFGD_neutronPy, "neutronPy[1000]/F");
    float  SFGD_neutronPz[1000] = {}; SFGDtree->Branch("neutronPz", &SFGD_neutronPz, "neutronPz[1000]/F");
    float  SFGD_neutronId[1000] = {}; SFGDtree->Branch("neutronId", &SFGD_neutronId, "neutronId[1000]/F");
    float  SFGD_daughterParentId[1000] = {}; SFGDtree->Branch("daughterParentId", &SFGD_daughterParentId, "daughterParentId[1000]/F");
    int    SFGD_delay[1000] = {}; SFGDtree->Branch("delay", &SFGD_delay, "delay[1000]/I");
    float  SFGD_t_t0[1000] = {}; SFGDtree->Branch("t0", &SFGD_t_t0, "t_t0[1000]/F");
    float  SFGD_t_spill[1000] = {}; SFGDtree->Branch("spill", &SFGD_t_spill, "t_spill[1000]/F");
    float  SFGD_t_gamma_time[1000] = {}; SFGDtree->Branch("gamma_time", &SFGD_t_gamma_time, "t_gamma_time[1000]/F");
    float  SFGD_t_neutron_time = {}; SFGDtree->Branch("neutron_time", &SFGD_t_neutron_time, "t_neutron_time/F");
    float  SFGD_neutronParentId[1000] = {}; SFGDtree->Branch("neutronParentId", &SFGD_neutronParentId, "neutronParentId[1000]/F");
    float  SFGD_neutronParentPDG[1000] = {}; SFGDtree->Branch("neutronParentPDG", &SFGD_neutronParentPDG, "neutronParentPDG[1000]/F");
    float  SFGD_neutronTrackId[1000] = {}; SFGDtree->Branch("neutronTrackId", &SFGD_neutronTrackId, "neutronTrackId[1000]/F");
    float  SFGD_neutronTrackPDG[1000] = {}; SFGDtree->Branch("neutronTrackPDG", &SFGD_neutronTrackPDG, "neutronTrackPDG[1000]/F");
    float  SFGD_neutronTrackAng[1000] = {}; SFGDtree->Branch("neutronTrackAng", &SFGD_neutronTrackAng, "neutronTrackAng[1000]/F");
    int    SFGD_t_id[1000] = {}; SFGDtree->Branch("id", &SFGD_t_id, "t_id[1000]/I");
    float  SFGD_t_length[1000] = {}; SFGDtree->Branch("length", &SFGD_t_length, "t_length[1000]/F");
    int    SFGD_nTrackId[1000] = {}; SFGDtree->Branch("nTrackId", &SFGD_nTrackId, "nTrackId[1000]/I");
    int    SFGD_nParentId[1000] = {}; SFGDtree->Branch("nParentId", &SFGD_nParentId, "nParentId[1000]/I");
    float  SFGD_nTrackEnergy[1000] = {}; SFGDtree->Branch("nTrackEnergy", &SFGD_nTrackEnergy, "nTrackEnergy[1000]/F");
    float  SFGD_nTrackAng[1000] = {}; SFGDtree->Branch("nTrackAng", &SFGD_nTrackAng, "nTrackAng[1000]/F");
    int    SFGD_nTrackPdg[1000] = {}; SFGDtree->Branch("nTrackPdg", &SFGD_nTrackPdg, "nTrackPdg[1000]/I");
    int    SFGD_nParentPdg[1000] = {}; SFGDtree->Branch("nParentPdg", &SFGD_nParentPdg, "nParentPdg[1000]/I");
    float  SFGD_pointPositionX[100] = {}; SFGDtree->Branch("pointPositionX", &SFGD_pointPositionX, "pointPositionX[100]/F");
    float  SFGD_pointPositionY[100] = {}; SFGDtree->Branch("pointPositionY", &SFGD_pointPositionY, "pointPositionY[100]/F");
    float  SFGD_pointPositionZ[100] = {}; SFGDtree->Branch("pointPositionZ", &SFGD_pointPositionZ, "pointPositionZ[100]/F");
    int    SFGD_pointProcess[100] = {}; SFGDtree->Branch("pointProcess", &SFGD_pointProcess, "pointProcess[100]/I");
    int    SFGD_pointSubProcess[100] = {}; SFGDtree->Branch("pointSubProcess", &SFGD_pointSubProcess, "pointSubProcess[100]/I");
    float  SFGD_nElastic[100] = {}; SFGDtree->Branch("nElastic", &SFGD_nElastic, "nElastic[100]/F");

    TFile* USJoutput = new TFile("tempUSJ.root", "RECREATE", "RECREATE");
    TTree* USJtree = new TTree("tree", "tree");
    int    USJ_ifileNo = {}; USJtree->Branch("ifileNo", &USJ_ifileNo, "ifileNo/I");
    int    USJ_ievt = {}; USJtree->Branch("ievt", &USJ_ievt, "ievt/I");
    float  USJ_vtx[3] = {}; USJtree->Branch("vtx", &USJ_vtx, "vtx[3]/F");
    int    USJ_nFS = {}; USJtree->Branch("nFS", &USJ_nFS, "nFS/I");
    int    USJ_fsPdg[1000] = {}; USJtree->Branch("fsPdg", &USJ_fsPdg, "fsPdg[nFS]/I");
    float  USJ_fsPx[1000] = {}; USJtree->Branch("fsPx", &USJ_fsPx, "fsPx[nFS]/F");
    float  USJ_fsPy[1000] = {}; USJtree->Branch("fsPy", &USJ_fsPy, "fsPy[nFS]/F");
    float  USJ_fsPz[1000] = {}; USJtree->Branch("fsPz", &USJ_fsPz, "fsPz[nFS]/F");
    float  USJ_fsE[1000] = {}; USJtree->Branch("fsE", &USJ_fsE, "fsE[nFS]/F");
    float  USJ_neutronHitX[1000] = {}; USJtree->Branch("neutronHitX", &USJ_neutronHitX, "neutronHitX[1000]/F");
    float  USJ_neutronHitY[1000] = {}; USJtree->Branch("neutronHitY", &USJ_neutronHitY, "neutronHitY[1000]/F");
    float  USJ_neutronHitZ[1000] = {}; USJtree->Branch("neutronHitZ", &USJ_neutronHitZ, "neutronHitZ[1000]/F");
    float  USJ_neutronHitT[1000] = {}; USJtree->Branch("neutronHitT", &USJ_neutronHitT, "neutronHitT[1000]/F");
    float  USJ_neutronHitE[1000] = {}; USJtree->Branch("neutronHitE", &USJ_neutronHitE, "neutronHitE[1000]/F");
    float  USJ_neutronHitPDG[1000] = {}; USJtree->Branch("neutronHitPDG", &USJ_neutronHitPDG, "neutronHitPDG[1000]/F");
    float  USJ_initialE[1000] = {}; USJtree->Branch("initialE", &USJ_initialE, "initialE[1000]/F");
    float  USJ_daughterPx[1000] = {}; USJtree->Branch("daughterPx", &USJ_daughterPx, "daughterPx[1000]/F");
    float  USJ_daughterPy[1000] = {}; USJtree->Branch("daughterPy", &USJ_daughterPy, "daughterPy[1000]/F");
    float  USJ_daughterPz[1000] = {}; USJtree->Branch("daughterPz", &USJ_daughterPz, "daughterPz[1000]/F");
    float  USJ_daughterPDG[1000] = {}; USJtree->Branch("daughterPDG", &USJ_daughterPDG, "daughterPDG[1000]/F");
    int    USJ_node[1000] = {}; USJtree->Branch("node", &USJ_node, "node[1000]/I");
    float  USJ_neutronPx[1000] = {}; USJtree->Branch("neutronPx", &USJ_neutronPx, "neutronPx[1000]/F");
    float  USJ_neutronPy[1000] = {}; USJtree->Branch("neutronPy", &USJ_neutronPy, "neutronPy[1000]/F");
    float  USJ_neutronPz[1000] = {}; USJtree->Branch("neutronPz", &USJ_neutronPz, "neutronPz[1000]/F");
    float  USJ_neutronId[1000] = {}; USJtree->Branch("neutronId", &USJ_neutronId, "neutronId[1000]/F");
    float  USJ_daughterParentId[1000] = {}; USJtree->Branch("daughterParentId", &USJ_daughterParentId, "daughterParentId[1000]/F");
    int    USJ_delay[1000] = {}; USJtree->Branch("delay", &USJ_delay, "delay[1000]/I");
    float  USJ_t_t0[1000] = {}; USJtree->Branch("t0", &USJ_t_t0, "t_t0[1000]/F");
    float  USJ_t_spill[1000] = {}; USJtree->Branch("spill", &USJ_t_spill, "t_spill[1000]/F");
    float  USJ_t_gamma_time[1000] = {}; USJtree->Branch("gamma_time", &USJ_t_gamma_time, "t_gamma_time[1000]/F");
    float  USJ_t_neutron_time = {}; USJtree->Branch("neutron_time", &USJ_t_neutron_time, "t_neutron_time/F");
    float  USJ_neutronParentId[1000] = {}; USJtree->Branch("neutronParentId", &USJ_neutronParentId, "neutronParentId[1000]/F");
    float  USJ_neutronParentPDG[1000] = {}; USJtree->Branch("neutronParentPDG", &USJ_neutronParentPDG, "neutronParentPDG[1000]/F");
    float  USJ_neutronTrackId[1000] = {}; USJtree->Branch("neutronTrackId", &USJ_neutronTrackId, "neutronTrackId[1000]/F");
    float  USJ_neutronTrackPDG[1000] = {}; USJtree->Branch("neutronTrackPDG", &USJ_neutronTrackPDG, "neutronTrackPDG[1000]/F");
    float  USJ_neutronTrackAng[1000] = {}; USJtree->Branch("neutronTrackAng", &USJ_neutronTrackAng, "neutronTrackAng[1000]/F");
    int    USJ_t_id[1000] = {}; USJtree->Branch("id", &USJ_t_id, "t_id[1000]/I");
    float  USJ_t_length[1000] = {}; USJtree->Branch("ngth", &USJ_t_length, "t_length[1000]/F");
    int    USJ_nTrackId[1000] = {}; USJtree->Branch("nTrackId", &USJ_nTrackId, "nTrackId[1000]/I");
    int    USJ_nParentId[1000] = {}; USJtree->Branch("nParentId", &USJ_nParentId, "nParentId[1000]/I");
    float  USJ_nTrackEnergy[1000] = {}; USJtree->Branch("nTrackEnergy", &USJ_nTrackEnergy, "nTrackEnergy[1000]/F");
    float  USJ_nTrackAng[1000] = {}; USJtree->Branch("nTrackAng", &USJ_nTrackAng, "nTrackAng[1000]/F");
    int    USJ_nTrackPdg[1000] = {}; USJtree->Branch("nTrackPdg", &USJ_nTrackPdg, "nTrackPdg[1000]/I");
    int    USJ_nParentPdg[1000] = {}; USJtree->Branch("nParentPdg", &USJ_nParentPdg, "nParentPdg[1000]/I");
    float  USJ_pointPositionX[100] = {}; USJtree->Branch("pointPositionX", &USJ_pointPositionX, "pointPositionX[100]/F");
    float  USJ_pointPositionY[100] = {}; USJtree->Branch("pointPositionY", &USJ_pointPositionY, "pointPositionY[100]/F");
    float  USJ_pointPositionZ[100] = {}; USJtree->Branch("pointPositionZ", &USJ_pointPositionZ, "pointPositionZ[100]/F");
    int    USJ_pointProcess[100] = {}; USJtree->Branch("pointProcess", &USJ_pointProcess, "pointProcess[100]/I");
    int    USJ_pointSubProcess[100] = {}; USJtree->Branch("pointSubProcess", &USJ_pointSubProcess, "pointSubProcess[100]/I");
    float  USJ_nElastic[100] = {}; USJtree->Branch("nElastic", &USJ_nElastic, "nElastic[100]/F");

    std::cout << "inputTree->GetEntries(): " << inputTree->GetEntries() << std::endl;

    for (int event_i = 0; event_i < inputTree->GetEntries(); ++event_i) {
        inputTree->GetEntry(event_i);
        std::cout << "event: " << event_i << std::endl;
        for (int i = 0; i < 1000; ++i) {
            //SFGD
            if (INPUT_neutronHitZ[i] != 0 && INPUT_neutronHitZ[i] < 40) {
                SFGD_ifileNo = INPUT_ifileNo;
                SFGD_ievt = INPUT_ievt;
                for (int i = 0; i < 3; ++i) {
                    USJ_vtx[i] = INPUT_vtx[i];
                }
                SFGD_nFS = INPUT_nFS;
                SFGD_fsPdg[i] = INPUT_fsPdg[i];
                SFGD_fsPx[i] = INPUT_fsPx[i];
                SFGD_fsPy[i] = INPUT_fsPy[i];
                SFGD_fsPz[i] = INPUT_fsPz[i];
                SFGD_fsE[i] = INPUT_fsE[i];
                SFGD_t_neutron_time =  INPUT_t_neutron_time;
                SFGD_neutronHitX[i] = INPUT_neutronHitX[i];
                SFGD_neutronHitY[i] = INPUT_neutronHitY[i];
                SFGD_neutronHitZ[i] = INPUT_neutronHitZ[i];
                SFGD_neutronHitT[i] = INPUT_neutronHitT[i];
                SFGD_neutronHitE[i] = INPUT_neutronHitE[i];
                SFGD_neutronHitPDG[i] = INPUT_neutronHitPDG[i];
                SFGD_initialE[i] = INPUT_initialE[i];
                SFGD_daughterPx[i] = INPUT_daughterPx[i];
                SFGD_daughterPy[i] = INPUT_daughterPy[i];
                SFGD_daughterPz[i] = INPUT_daughterPz[i];
                SFGD_daughterPDG[i] = INPUT_daughterPDG[i];
                SFGD_node[i] = INPUT_node[i];
                SFGD_neutronPx[i] = INPUT_neutronPx[i];
                SFGD_neutronPy[i] = INPUT_neutronPy[i];
                SFGD_neutronPz[i] = INPUT_neutronPz[i];
                SFGD_neutronId[i] = INPUT_neutronId[i];
                SFGD_daughterParentId[i] = INPUT_daughterParentId[i];
                SFGD_delay[i] = INPUT_delay[i];
                SFGD_t_t0[i] = INPUT_t_t0[i];
                SFGD_t_spill[i] = INPUT_t_spill[i];
                SFGD_t_gamma_time[i] = INPUT_t_gamma_time[i];
                SFGD_neutronParentId[i] = INPUT_neutronParentId[i];
                SFGD_neutronParentPDG[i] = INPUT_neutronParentPDG[i];
                SFGD_neutronTrackId[i] = INPUT_neutronTrackId[i];
                SFGD_neutronTrackPDG[i] = INPUT_neutronTrackPDG[i];
                SFGD_neutronTrackAng[i] = INPUT_neutronTrackAng[i];
                SFGD_t_id[i] = INPUT_t_id[i];
                SFGD_t_length[i] = INPUT_t_length[i];
                SFGD_nTrackId[i] = INPUT_nTrackId[i];
                SFGD_nParentId[i] = INPUT_nParentId[i];
                SFGD_nTrackEnergy[i] = INPUT_nTrackEnergy[i];
                SFGD_nTrackAng[i] = INPUT_nTrackAng[i];
                SFGD_nTrackPdg[i] = INPUT_nTrackPdg[i];
                SFGD_nParentPdg[i] = INPUT_nParentPdg[i];
            }
            //USJ
            if (INPUT_neutronHitZ[i] != 0 && INPUT_neutronHitZ[i] > 40) {
                USJ_ifileNo = INPUT_ifileNo;
                USJ_ievt = INPUT_ievt;
                for (int i = 0; i < 3; ++i) {
                    USJ_vtx[i] = INPUT_vtx[i];
                }
                USJ_nFS = INPUT_nFS;
                USJ_fsPdg[i] = INPUT_fsPdg[i];
                USJ_fsPx[i] = INPUT_fsPx[i];
                USJ_fsPy[i] = INPUT_fsPy[i];
                USJ_fsPz[i] = INPUT_fsPz[i];
                USJ_fsE[i] = INPUT_fsE[i];
                USJ_t_neutron_time =  INPUT_t_neutron_time;
                USJ_neutronHitX[i] = INPUT_neutronHitX[i];
                USJ_neutronHitY[i] = INPUT_neutronHitY[i];
                USJ_neutronHitZ[i] = INPUT_neutronHitZ[i];
                USJ_neutronHitT[i] = INPUT_neutronHitT[i];
                USJ_neutronHitE[i] = INPUT_neutronHitE[i];
                USJ_neutronHitPDG[i] = INPUT_neutronHitPDG[i];
                USJ_initialE[i] = INPUT_initialE[i];
                USJ_daughterPx[i] = INPUT_daughterPx[i];
                USJ_daughterPy[i] = INPUT_daughterPy[i];
                USJ_daughterPz[i] = INPUT_daughterPz[i];
                USJ_daughterPDG[i] = INPUT_daughterPDG[i];
                USJ_node[i] = INPUT_node[i];
                USJ_neutronPx[i] = INPUT_neutronPx[i];
                USJ_neutronPy[i] = INPUT_neutronPy[i];
                USJ_neutronPz[i] = INPUT_neutronPz[i];
                USJ_neutronId[i] = INPUT_neutronId[i];
                USJ_daughterParentId[i] = INPUT_daughterParentId[i];
                USJ_delay[i] = INPUT_delay[i];
                USJ_t_t0[i] = INPUT_t_t0[i];
                USJ_t_spill[i] = INPUT_t_spill[i];
                USJ_t_gamma_time[i] = INPUT_t_gamma_time[i];
                USJ_neutronParentId[i] = INPUT_neutronParentId[i];
                USJ_neutronParentPDG[i] = INPUT_neutronParentPDG[i];
                USJ_neutronTrackId[i] = INPUT_neutronTrackId[i];
                USJ_neutronTrackPDG[i] = INPUT_neutronTrackPDG[i];
                USJ_neutronTrackAng[i] = INPUT_neutronTrackAng[i];
                USJ_t_id[i] = INPUT_t_id[i];
                USJ_t_length[i] = INPUT_t_length[i];
                USJ_nTrackId[i] = INPUT_nTrackId[i];
                USJ_nParentId[i] = INPUT_nParentId[i];
                USJ_nTrackEnergy[i] = INPUT_nTrackEnergy[i];
                USJ_nTrackAng[i] = INPUT_nTrackAng[i];
                USJ_nTrackPdg[i] = INPUT_nTrackPdg[i];
                USJ_nParentPdg[i] = INPUT_nParentPdg[i];
            }
        }
        for (int i = 0; i < 100; ++i) {
            SFGD_pointPositionX[i] = INPUT_pointPositionX[i];
            SFGD_pointPositionY[i] = INPUT_pointPositionY[i];
            SFGD_pointPositionZ[i] = INPUT_pointPositionZ[i];
            SFGD_pointProcess[i] = INPUT_pointProcess[i];
            SFGD_pointSubProcess[i] = INPUT_pointSubProcess[i];
            SFGD_nElastic[i] = INPUT_nElastic[i];
            USJ_pointPositionX[i] = INPUT_pointPositionX[i];
            USJ_pointPositionY[i] = INPUT_pointPositionY[i];
            USJ_pointPositionZ[i] = INPUT_pointPositionZ[i];
            USJ_pointProcess[i] = INPUT_pointProcess[i];
            USJ_pointSubProcess[i] = INPUT_pointSubProcess[i];
            USJ_nElastic[i] = INPUT_nElastic[i];
        }

        SFGDtree->Fill();
        USJtree->Fill();
    }
    SFGDoutput->cd();
    SFGDtree->Write();
    SFGDoutput->Close();

    USJoutput->cd();
    USJtree->Write();
    USJoutput->Close();

    exit(0);
}
